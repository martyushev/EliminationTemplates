# Input: coefficient matrix C of size 4x16
# Output: solution matrix S of size 4x10

function red_10x20_wpnp_2x2sym(C::Array{ComplexF64})

    M = sparse([1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10],[1,11,13,16,20,4,9,12,14,20,7,10,15,17,19,2,12,14,16,20,3,5,9,13,20,6,8,10,17,18,1,3,6,7,13,2,4,7,8,14,2,4,6,7,12,5,7,8,11,13],C[[5,17,33,49,61,33,61,5,17,49,33,61,5,49,17,14,26,38,50,62,26,38,62,14,50,26,38,62,50,14,3,43,55,59,31,3,43,55,59,31,12,48,56,60,24,48,56,60,12,24]],10,20)
    M = Matrix(M)

    L,_,p = lu(M[:,1:2])
    Id = Matrix{Float64}(I,10,10)
    M = [L Id[:,3:end]][invperm(p),:]\M[:,3:end]
    M = M[end-7:end,:]

    T0 = zeros(ComplexF64,10,10)
    T0[[2,3,4,5,8,9,10,7],:] = -M[:,9:end]
    T0[[31,96]] .= 1
    T1 = zeros(ComplexF64,10,10)
    T1[[2,3,4,5,8,9,10,7],[2,3,4,5,8,9,10,7]] = M[:,1:8]
    T1[[1,56]] .= 1

    _,V = eigen(T0,T1)
    S = V[6:9,:]./repeat(V[10:10,:],4)

    z = sqrt.(S[4,:])
    y = S[3,:]./z
    x = 1.0./S[2,:]
    w = S[1,:]
    S = transpose([[w x y z]; [w x -y -z]])
    S = S[:,vec(all(c -> !isinf(c) && !isnan(c), S; dims=1))]

    return S

end