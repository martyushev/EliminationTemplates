function coefs_satellite_triang(data::Vector{Matrix{Float64}})

    c1 = data[1]
    c2 = data[2]
    c3 = data[3]

    C = zeros(3,20)
    C[58] = c1[1]
    C[55] = c1[2]
    C[46] = c1[3]
    C[28] = c1[4]
    C[52] = c1[5]
    C[43] = c1[6]
    C[25] = c1[7]
    C[37] = c1[8]
    C[19] = c1[9]
    C[10] = c1[10]
    C[49] = c1[11]
    C[40] = c1[12]
    C[22] = c1[13]
    C[34] = c1[14]
    C[16] = c1[15]
    C[7] = c1[16]
    C[31] = c1[17]
    C[13] = c1[18]
    C[4] = c1[19]
    C[1] = c1[20]
    C[59] = c2[1]
    C[56] = c2[2]
    C[47] = c2[3]
    C[29] = c2[4]
    C[53] = c2[5]
    C[44] = c2[6]
    C[26] = c2[7]
    C[38] = c2[8]
    C[20] = c2[9]
    C[11] = c2[10]
    C[50] = c2[11]
    C[41] = c2[12]
    C[23] = c2[13]
    C[35] = c2[14]
    C[17] = c2[15]
    C[8] = c2[16]
    C[32] = c2[17]
    C[14] = c2[18]
    C[5] = c2[19]
    C[2] = c2[20]
    C[60] = c3[1]
    C[57] = c3[2]
    C[48] = c3[3]
    C[30] = c3[4]
    C[54] = c3[5]
    C[45] = c3[6]
    C[27] = c3[7]
    C[39] = c3[8]
    C[21] = c3[9]
    C[12] = c3[10]
    C[51] = c3[11]
    C[42] = c3[12]
    C[24] = c3[13]
    C[36] = c3[14]
    C[18] = c3[15]
    C[9] = c3[16]
    C[33] = c3[17]
    C[15] = c3[18]
    C[6] = c3[19]
    C[3] = c3[20]

    C = C./repeat(sqrt.(sum(C.*conj(C),dims=2)),1,size(C,2))

    U(x,y,z) = [x^3,y*x^2,y^2*x,y^3,x^2*z,x*y*z,y^2*z,x*z^2,y*z^2,z^3,x^2,x*y,y^2,x*z,y*z,z^2,x,y,z,1]

    return C,U

end