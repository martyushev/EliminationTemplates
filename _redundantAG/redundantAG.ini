opts :=

############################### templateFinder ###############################

# prime number, default: 40009
# number of elements in the finite field, it should be large enough to reduce the probability of invalid templates
primeNumber = 40009,

# 0/1/list of positive integers, default: 1
# 0 - no polynomials are treated as constant
# 1 - try to automatically find constant polynomials (applcable if the function for creating polynomials is available in F_prob.m)
# list of positive integers, e.g. [1,2] - the specified polynomials are treated as constant (they must have constant coefficients for all instances of the problem)
constPols = 1,

# list of positive integers, default: []
# e.g. [1,2] - the specified variables are replaced with their reciprocals in the original system
iVars = [],

# 0/1/list of positive integers, default: 0
# 0 - no polynomials removed
# 1 - try to automatically remove high degree polynomials from the original system without changing the ideal (may be time consuming)
# list of positive integers, e.g. [1,2] - the specified polynomials are removed from the original system (this may change the ideal)
removePols = 0,

# emty list/list of lists of Laurent monomials, default: []
# manual shifting monomials, e.g. [[1,x,1/y], [1], [x^2,y]] - the number of sublists must equal the number of polynomials in the original system
# some sublists may be empty, which means that the corresponding polynomials are removed from the original system (this may change the ideal)
# it can be copied/pasted from templates/t_prob
manShifts = [],

# -1/0/1, default: 1
# neighboring monomial selection strategy in the shift construction function, set to 1 for polynomial systems
sShifts = 1,

# 1/2/3/4/list of (Laurent) monomials, default: 3
# 1 - variables only
# 2 - only reciprocals of variables
# 3 - both variables and their reciprocals
# 4 - variables, their reciprocals, and all possible homogeneous monomials of type x/y
# non-empty list of (Laurent) monomials, e.g. [x^2, 1/y, z/x] - only the specified monomials are tried as the action monomials
sActMons = 3,

# non-negative integer, default: 100
# change the shift construction function from shifts() to shifts1() as d > dChange
# set to 100 to use shifts() only (faster but usually larger templates)
# set to 0 to use shifts1() only (slower but usually smaller templates)
# tip: first run templateFinder(prob) for dChange=100; if the template is found for d=d0, then rerun templateFinder(prob) for dChange=d0-1, d0-2, and so on down to 0; choose the best template found
dChange = 100,

# positive integer, default: 100
# maximum number of elimination templates to search
maxTD = 100,

############################### templateReduction ###############################

# 1/2, default: 1
# template reduction method (1 - better reduction, 2 - faster)
mRed = 1,

# non-negative integer, default: 0
# allow to increase the number of roots by this value during reduction (applicable to mRed = 1 only)
nRootTol = 0,

# 0/1, default: 1
# 0 - show the raw intermediate template data during reduction (faster)
# 1 - show the processed intermediate template data during reduction (slower)
showInfo = 1,

############################### solverGenerator ###############################

# non-empty string, default: "../solvers"
# root directory for solvers
rootDir = "../solvers",

# 0/1, default: 0
# show the list of permissible monomials (this can be helpful for manual reduction)
showPM = 0,

# 0/1, default: 0
# apply the column-pivoting strategy
colpiv = 0,

# 0/1, default: 1
# create (if possible) the files inidata_prob.m and coefs_prob.m for computing initial Macaulay matrix
createCoefsFile = 1,

# 0/1, default: 1
# create the test file test_num_prob.m
createTestFile = 1,

# 0/1, default: 1
# create the solver file either red_mxn_colpiv_prob.m (if colpiv = 1) or red_mxn_prob.m (if colpiv = 0)
createSolverFile = 1,

############################### rootFinder ###############################

# 1/2, default: 1
# root finding method
# 1 - elimination template method
# 2 - Groebner basis method (applicable to 0-dimensional polynomial systems only))
mRoot = 1,

# positive integer, default: 30
# number of digits for software floating-point calculations
nDigits = 30,

# 0/1, default: 0
# show the reduced row echelon form of template (applicable to mRoot = 1 only)
showRREF = 0,

# 0/1, default: 0
# show the action matrix
showAM = 0,

# 0/1, default: 0
# show the factorized characteristic polynomial (applicable to mRoot = 1 only) (may be time consuming)
showCP = 0,

# 0/1, default: 0
# show the action polynomial (applicable to mRoot = 2 only)
showAP = 0: