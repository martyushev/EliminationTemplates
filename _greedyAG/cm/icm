Ws = ((10, 9, 12, 12, 7, 6), (5, 7, 4, 8, 4, 5), (10, 7, 11, 13, 12, 14), (6, 3, 3, 4, 5, 3), (6, 5, 5, 9, 6, 10), (12, 14, 9, 13, 15, 12), (17, 8, 11, 13, 12, 7), (10, 15, 16, 13, 9, 21), (8, 4, 5, 4, 5, 7), (9, 16, 11, 16, 14, 12), (7, 13, 15, 13, 9, 10), (6, 5, 11, 6, 8, 11), (12, 7, 11, 10, 8, 13), (22, 16, 15, 14, 11, 17), (14, 9, 8, 14, 6, 13), (9, 18, 12, 13, 16, 11), (11, 6, 8, 8, 10, 7), (3, 3, 3, 6, 4, 5), (9, 13, 7, 10, 13, 7), (9, 9, 11, 7, 6, 9), (10, 9, 9, 14, 7, 12), (7, 6, 9, 9, 11, 9), (8, 8, 9, 6, 10, 5), (11, 14, 16, 17, 22, 15), (10, 11, 9, 12, 10, 6), (6, 9, 5, 10, 7, 10), (23, 27, 21, 20, 31, 16), (12, 15, 8, 17, 9, 10), (12, 14, 13, 10, 8, 11), (6, 7, 6, 8, 4, 7), (9, 15, 8, 12, 15, 10), (12, 17, 9, 10, 14, 15), (16, 13, 15, 17, 11, 21), (15, 7, 10, 13, 12, 8), (7, 6, 5, 6, 8, 9), (8, 8, 10, 10, 7, 5), (7, 11, 12, 9, 10, 10), (17, 10, 14, 9, 12, 15), (12, 19, 14, 19, 10, 13), (8, 9, 15, 13, 13, 10), (15, 11, 8, 15, 13, 9), (8, 10, 5, 9, 10, 10), (9, 15, 8, 10, 15, 12), (9, 12, 12, 13, 14, 15), (6, 10, 7, 9, 8, 12), (12, 15, 9, 14, 12, 13), (7, 13, 12, 9, 15, 13), (8, 7, 13, 13, 9, 12), (6, 12, 12, 8, 9, 10), (8, 12, 13, 18, 14, 10), (16, 15, 17, 10, 11, 8), (12, 15, 10, 21, 18, 22), (6, 7, 10, 11, 10, 8), (8, 10, 7, 5, 10, 8), (15, 10, 15, 12, 8, 9), (7, 5, 8, 8, 8, 6), (11, 10, 7, 10, 9, 12), (8, 5, 9, 9, 9, 6), (7, 9, 5, 8, 9, 9), (8, 10, 5, 7, 11, 11), (11, 9, 9, 6, 7, 9), (9, 10, 10, 5, 7, 6), (8, 10, 18, 13, 16, 7), (7, 15, 13, 10, 9, 13), (9, 11, 9, 7, 9, 6), (15, 12, 23, 16, 17, 19), (9, 14, 10, 7, 14, 7), (11, 8, 12, 13, 10, 14), (12, 12, 15, 13, 14, 9), (16, 17, 10, 8, 13, 12), (13, 10, 9, 15, 8, 13), (9, 7, 8, 6, 10, 12), (15, 9, 13, 12, 14, 12), (10, 9, 17, 14, 15, 12), (7, 6, 4, 6, 8, 3), (12, 10, 6, 9, 11, 10), (8, 10, 8, 9, 5, 6), (5, 4, 6, 7, 8, 7), (7, 6, 10, 6, 10, 5), (10, 20, 13, 17, 11, 18), (7, 13, 11, 8, 10, 12), (12, 10, 8, 9, 12, 6), (7, 9, 12, 8, 13, 13), (10, 9, 17, 12, 15, 14), (8, 4, 5, 7, 5, 4), (13, 11, 7, 12, 10, 8), (15, 12, 14, 11, 7, 13), (16, 10, 17, 20, 12, 13), (18, 17, 12, 16, 19, 18), (14, 7, 9, 9, 10, 12), (10, 10, 6, 9, 7, 9), (9, 11, 11, 5, 9, 8), (7, 11, 8, 10, 10, 6), (8, 7, 11, 12, 10, 13), (11, 7, 12, 10, 13, 8), (18, 20, 17, 13, 11, 10), (12, 9, 12, 11, 8, 15), (10, 16, 15, 9, 8, 11), (10, 8, 15, 15, 12, 9), (6, 13, 9, 7, 8, 13), (9, 12, 6, 8, 10, 12), (6, 10, 12, 11, 9, 10), (9, 10, 9, 10, 6, 7), (7, 10, 7, 5, 4, 7), (11, 6, 7, 9, 9, 9), (16, 11, 14, 16, 12, 9), (10, 19, 12, 14, 19, 13), (22, 25, 28, 18, 36, 27), (11, 10, 13, 12, 8, 7), (18, 16, 24, 12, 13, 23), (3, 6, 5, 4, 3, 3), (10, 10, 6, 9, 9, 7), (17, 12, 8, 10, 13, 16), (9, 15, 10, 12, 17, 8), (17, 12, 9, 14, 10, 15), (30, 15, 25, 22, 20, 19), (4, 3, 4, 4, 4, 2), (9, 9, 6, 9, 7, 11), (12, 7, 10, 8, 13, 11), (6, 10, 11, 8, 8, 7), (10, 11, 7, 6, 6, 8), (10, 7, 6, 5, 7, 8), (6, 3, 4, 3, 3, 5), (15, 12, 9, 15, 10, 8), (11, 7, 9, 9, 9, 6), (13, 10, 9, 7, 9, 9), (20, 17, 10, 13, 16, 12), (6, 4, 3, 6, 7, 5), (12, 9, 12, 10, 8, 6), (17, 12, 9, 11, 13, 13), (4, 8, 9, 8, 6, 7), (12, 16, 18, 23, 13, 24), (10, 17, 12, 15, 9, 14), (9, 10, 12, 15, 8, 15), (14, 10, 19, 22, 11, 23), (21, 12, 20, 14, 18, 11), (12, 13, 7, 10, 8, 9), (8, 6, 11, 10, 7, 10), (6, 7, 10, 10, 9, 9), (13, 15, 10, 13, 8, 9), (9, 18, 12, 16, 13, 11), (16, 9, 11, 18, 12, 13), (11, 9, 7, 9, 9, 6), (13, 16, 15, 11, 21, 17), (7, 10, 6, 10, 9, 13), (12, 11, 12, 15, 8, 9), (8, 8, 6, 8, 5, 7), (10, 8, 11, 13, 8, 6), (12, 7, 8, 16, 9, 11), (14, 11, 23, 19, 10, 22), (9, 13, 11, 10, 13, 6), (10, 14, 15, 12, 7, 9), (9, 10, 7, 6, 9, 10), (9, 14, 13, 7, 8, 11), (13, 12, 15, 14, 12, 9), (17, 12, 13, 10, 20, 16), (15, 12, 9, 8, 10, 15), (9, 9, 6, 7, 9, 11), (5, 10, 6, 9, 7, 10), (15, 11, 16, 8, 17, 10), (8, 10, 8, 4, 5, 11), (7, 4, 8, 6, 5, 7), (10, 6, 7, 9, 5, 10), (12, 14, 24, 17, 18, 19), (10, 9, 6, 10, 7, 9), (11, 17, 16, 10, 15, 8), (10, 11, 6, 9, 12, 10), (9, 11, 9, 6, 7, 9), (16, 12, 15, 10, 7, 10), (10, 8, 7, 8, 10, 5), (9, 10, 6, 10, 11, 12), (6, 3, 5, 3, 4, 3), (9, 10, 9, 7, 10, 6), (24, 17, 18, 12, 19, 14), (7, 5, 8, 6, 7, 4), (10, 15, 15, 8, 9, 12), (6, 3, 3, 5, 4, 3), (4, 5, 10, 7, 7, 7), (12, 19, 16, 17, 23, 15), (11, 13, 13, 10, 9, 6), (11, 10, 7, 8, 6, 6), (11, 8, 8, 9, 7, 5), (10, 12, 6, 7, 9, 12), (6, 4, 5, 3, 5, 3), (8, 6, 13, 7, 10, 12), (17, 12, 9, 15, 8, 10), (7, 12, 13, 11, 10, 8), (10, 13, 24, 11, 16, 17), (13, 7, 16, 10, 12, 9), (6, 13, 7, 9, 10, 10), (13, 12, 15, 9, 14, 12), (14, 12, 14, 9, 11, 18), (8, 14, 12, 10, 13, 11), (6, 6, 8, 7, 9, 5), (10, 8, 15, 12, 15, 9), (10, 8, 9, 8, 5, 6), (10, 10, 7, 5, 9, 6), (14, 14, 7, 9, 10, 7), (5, 3, 3, 6, 4, 5), (12, 8, 7, 10, 11, 13));
pp = 32749;
vr = [u, v, w, x, y, z];
f = openOut "cm_toa_55_w_sat";
f << toString(pp) << endl;
f << toString(vr) << endl;
for i from 0 to 199 do (
f << toString(Ws#i) << endl;
R = ZZ/pp[u, v, w, x, y, z, MonomialOrder => Weights => Ws#i];
J = ideal(23736*u^3+18344*u^2*v+25581*u^2*w+20276*u^2*x+13873*u^2*y+4270*u*v^2+21360*u*v*w+1963*u*v*x+16611*u*v*y+2246*u*w^2+18036*u*w*x+6513*u*w*y+17292*u*x^2+14711*u*x*y+22770*u*y^2+21456*v^3+24792*v^2*w+5648*v^2*x+14885*v^2*y+24411*v*w^2+21343*v*w*x+24149*v*w*y+24896*v*x^2+11769*v*x*y+6090*v*y^2+26803*w^3+27635*w^2*x+16305*w^2*y+17728*w*x^2+10169*w*x*y+10530*w*y^2+2786*x^3+27488*x^2*y+19700*x*y^2+16447*y^3+28991*u^2+248*u*v+23856*u*w+2355*u*x+21561*u*y+656*v^2+14952*v*w+10310*v*x+11968*v*y+24404*w^2+16520*w*x+19072*w*y+7452*x^2+26779*x*y+23456*y^2+29515*u+15934*v+17974*w+18206*x+7532*y+26644, 9068*u^3+19643*u^2*v+977*u^2*w+10229*u^2*x+19337*u^2*y+14018*u*v^2+5705*u*v*w+5094*u*v*x+25949*u*v*y+5294*u*w^2+5628*u*w*x+4739*u*w*y+19724*u*x^2+1025*u*x*y+10395*u*y^2+15001*v^3+14463*v^2*w+27510*v^2*x+1264*v^2*y+10139*v*w^2+24070*v*w*x+4060*v*w*y+127*v*x^2+32194*v*x*y+10115*v*y^2+30309*w^3+30632*w^2*x+22636*w^2*y+9875*w*x^2+15818*w*x*y+22724*w*y^2+14293*x^3+20475*x^2*y+22184*x*y^2+31810*y^3+29118*u^2+13811*u*v+410*u*w+773*u*x+28781*u*y+9237*v^2+19139*v*w+787*v*x+6979*v*y+14126*w^2+8869*w*x+17394*w*y+12451*x^2+8419*x*y+19667*y^2+18411*u+19285*v+6136*w+4081*x+17531*y+6637, 15545*u^3+29755*u^2*v+22316*u^2*w+6277*u^2*x+20337*u^2*y+3989*u*v^2+16379*u*v*w+28939*u*v*x+14506*u*v*y+28015*u*w^2+30540*u*w*x+27366*u*w*y+18195*u*x^2+21210*u*x*y+4825*u*y^2+26378*v^3+10188*v^2*w+20615*v^2*x+32645*v^2*y+10664*v*w^2+27432*v*w*x+19921*v*w*y+23735*v*x^2+25057*v*x*y+30993*v*y^2+14307*w^3+27653*w^2*x+10476*w^2*y+22320*w*x^2+30642*w*x*y+130*w*y^2+447*x^3+14328*x^2*y+8541*x*y^2+31821*y^3+18916*u^2+8704*u*v+20840*u*w+25379*u*x+24295*u*y+19460*v^2+29294*v*w+3630*v*x+32016*v*y+12591*w^2+17119*w*x+18286*w*y+1469*x^2+20597*x*y+15891*y^2+30666*u+2545*v+23762*w+18255*x+5199*y+10659, 5746*u^3+25634*u^2*v+13995*u^2*w+27339*u^2*x+28906*u^2*y+4382*u*v^2+22326*u*v*w+5076*u*v*x+17287*u*v*y+17808*u*w^2+20131*u*w*x+28575*u*w*y+30980*u*x^2+22259*u*x*y+11421*u*y^2+12328*v^3+19741*v^2*w+17585*v^2*x+14058*v^2*y+7760*v*w^2+845*v*w*x+3247*v*w*y+9739*v*x^2+22864*v*x*y+6875*v*y^2+16506*w^3+23457*w^2*x+24693*w^2*y+21454*w*x^2+18384*w*x*y+11928*w*y^2+6724*x^3+2630*x^2*y+19910*x*y^2+13460*y^3+10233*u^2+4076*u*v+8420*u*w+9983*u*x+4657*u*y+10809*v^2+11650*v*w+24517*v*x+3141*v*y+9655*w^2+21404*w*x+6946*w*y+18445*x^2+20823*x*y+3679*y^2+14081*u+23985*v+12359*w+23898*x+9381*y+28863, 17493*u^4+21870*u^3*v+25135*u^3*w+5669*u^3*x+2530*u^3*y+15898*u^2*v^2+16173*u^2*v*w+5945*u^2*v*x+32631*u^2*v*y+21648*u^2*w^2+20763*u^2*w*x+26639*u^2*w*y+32647*u^2*x^2+26894*u^2*x*y+4226*u^2*y^2+31293*u*v^3+1140*u*v^2*w+23994*u*v^2*x+9396*u*v^2*y+11344*u*v*w^2+6296*u*v*w*x+4946*u*v*w*y+7025*u*v*x^2+18711*u*v*x*y+24574*u*v*y^2+13379*u*w^3+20865*u*w^2*x+23815*u*w^2*y+2463*u*w*x^2+21120*u*w*x*y+26998*u*w*y^2+19191*u*x^3+20860*u*x^2*y+3476*u*x*y^2+11224*u*y^3+32607*v^4+16744*v^3*w+5826*v^3*x+13628*v^3*y+2315*v^2*w^2+5992*v^2*w*x+2114*v^2*w*y+26881*v^2*x^2+28809*v^2*x*y+2612*v^2*y^2+26222*v*w^3+28991*v*w^2*x+9449*v*w^2*y+3392*v*w*x^2+23282*v*w*x*y+21241*v*w*y^2+17649*v*x^3+23639*v*x^2*y+9236*v*x*y^2+917*v*y^3+10079*w^4+9179*w^3*x+18550*w^3*y+26058*w^2*x^2+10782*w^2*x*y+12293*w^2*y^2+3723*w*x^3+6880*w*x^2*y+7067*w*x*y^2+3511*w*y^3+4633*x^4+20738*x^3*y+29654*x^2*y^2+757*x*y^3+29170*y^4+17024*u^3+22095*u^2*v+6928*u^2*w+32546*u^2*x+19850*u^2*y+11483*u*v^2+17552*u*v*w+3073*u*v*x+12964*u*v*y+17824*u*w^2+3416*u*w*x+5460*u*w*y+24624*u*x^2+16648*u*x*y+27788*u*y^2+1753*v^3+14764*v^2*w+21982*v^2*x+6841*v^2*y+20575*v*w^2+21383*v*w*x+26070*v*w*y+13338*v*x^2+14976*v*x*y+24995*v*y^2+12181*w^3+24790*w^2*x+32087*w^2*y+6004*w*x^2+28629*w*x*y+13033*w*y^2+21987*x^3+2294*x^2*y+5329*x*y^2+7217*y^3+3425*u^2+15723*u*v+13812*u*w+12976*u*x+15421*u*y+21473*v^2+16450*v*w+1852*v*x+7360*v*y+6037*w^2+29127*w*x+7958*w*y+32302*x^2+25974*x*y+26943*y^2+30067*u+29453*v+22498*w+21938*x+20512*y+30119, 11634*u^3*z+17720*u^2*v*z+13283*u^2*w*z+12068*u^2*x*z+28822*u^2*y*z+20164*u*v^2*z+1922*u*v*w*z+3221*u*v*x*z+8616*u*v*y*z+15698*u*w^2*z+15175*u*w*x*z+23342*u*w*y*z+4987*u*x^2*z+13413*u*x*y*z+27124*u*y^2*z+27655*v^3*z+28239*v^2*w*z+7341*v^2*x*z+902*v^2*y*z+25950*v*w^2*z+11215*v*w*x*z+11610*v*w*y*z+31168*v*x^2*z+25990*v*x*y*z+29664*v*y^2*z+22580*w^3*z+14051*w^2*x*z+10656*w^2*y*z+5425*w*x^2*z+11688*w*x*y*z+29363*w*y^2*z+4861*x^3*z+27024*x^2*y*z+17539*x*y^2*z+17926*y^3*z+16667*u^2*z+17277*u*v*z+31611*u*w*z+26878*u*x*z+19422*u*y*z+4639*v^2*z+1361*v*w*z+23281*v*x*z+6635*v*y*z+23769*w^2*z+11155*w*x*z+5682*w*y*z+18684*x^2*z+17145*x*y*z+19714*y^2*z+13460*u*z+6434*v*z+6026*w*z+26784*x*z+8577*y*z+3549*z+32748);
G = gb(J,ChangeMatrix=>true);
M = getChangeMatrix G;
f << toString(M) << endl;
);
f << close;