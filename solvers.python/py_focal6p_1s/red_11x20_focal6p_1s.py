import numpy as np
from scipy.sparse import csr_matrix
from scipy.linalg import lu, solve, eig

# Input: coefficient matrix C of size 10x20
# Output: solution matrix S of size 3x9

def red_11x20_focal6p_1s(C):
    M = csr_matrix((C.flat[[0,1,2,3,8,10,13,15,16,18,19,4,5,6,7,9,11,12,14,17,20,21,22,23,28,30,33,35,36,38,39,24,25,26,27,29,31,32,34,37,40,41,42,43,48,50,53,55,56,58,59,44,45,46,47,49,51,52,54,57,60,61,62,63,68,70,73,75,76,78,79,64,65,66,67,69,71,72,74,77,80,81,82,83,88,90,93,95,96,98,99,84,85,86,87,89,91,92,94,97,100,101,102,103,108,110,113,115,116,118,119,104,105,106,107,109,111,112,114,117,120,121,122,123,128,130,133,135,136,138,139,124,125,126,127,129,131,132,134,137,140,141,142,143,148,150,153,155,156,158,159,144,145,146,147,149,151,152,154,157,160,161,162,163,168,170,173,175,176,178,179,164,165,166,167,169,171,172,174,177,190,195,198,199,185,187,189,192,194,197,185,187,189,190,195,198,199,192,194,197]],([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,5,7,9,10,12,14,15,17,18,19,0,1,2,3,4,6,8,11,13,16])),shape=(11,20))
    M = M.toarray()

    P,L,_ = lu(M[:,:6])
    M = solve(np.concatenate((P@L,P[:,6:]),axis=1),M[:,6:])
    M = M[-5:,:]

    T0 = np.zeros((9,9))
    T0[[2,4,5,7,8],:] = -M[:,5:]
    T0.flat[[5,15,34,62]] = 1
    T1 = np.zeros((9,9))
    T1[np.ix_([2,4,5,7,8],[2,4,5,7,8])] = M[:,:5]
    T1.flat[[0,10,30,60]] = 1

    _,V = eig(T0,T1)
    S = V[5:8,:]/np.tile(V[8,:],(3,1))
    S = S[:,np.all(np.isfinite(S),axis=0)]

    return S