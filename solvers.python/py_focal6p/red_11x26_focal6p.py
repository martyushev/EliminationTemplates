import numpy as np
from scipy.sparse import csr_matrix
from scipy.linalg import lu, solve, eig

# Input: coefficient matrix C of size 10x26
# Output: solution matrix S of size 3x15

def red_11x26_focal6p(C):
    M = csr_matrix((C.flat[[3,10,13,15,16,18,20,21,23,24,25,1,2,4,5,6,7,8,9,17,22,11,12,14,19,29,36,39,41,42,44,46,47,49,50,51,27,28,30,31,32,33,34,35,43,48,37,38,40,45,62,65,67,70,72,73,75,76,77,57,58,59,60,61,69,74,64,66,71,81,88,91,93,94,96,98,99,101,102,103,78,79,80,82,83,84,85,86,87,95,100,90,92,97,107,114,117,119,120,122,124,125,127,128,129,104,105,106,108,109,110,111,112,113,121,126,116,118,123,133,140,143,145,148,150,151,153,154,155,131,135,137,138,139,147,142,144,149,159,166,169,171,172,174,176,177,179,180,181,157,158,161,162,163,164,165,173,178,168,170,175,185,192,195,197,198,200,202,203,205,206,207,183,184,187,188,189,190,191,199,204,194,196,201,218,221,223,224,226,228,229,231,232,233,210,213,215,216,220,222,227,244,247,249,250,252,257,259,254,255,258,244,247,249,250,252,254,255,257,258,259]],([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10],[0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,5,6,7,8,9,10,15,16,17,18,19,20,21,23,24,25,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,0,1,2,3,5,6,7,8,9,10,12,15,17,18,19,20,23,24,25,0,1,2,3,4,5,6,7,8,9,10,12,13,15,16,17,18,19,20,21,23,24,25,0,1,2,3,4,5,6,7,8,9,10,12,13,15,16,17,18,19,20,21,23,24,25,1,2,3,4,5,6,7,8,9,10,13,15,17,18,23,24,25,0,15,17,18,19,20,21,23,24,25,1,2,3,4,5,6,7,8,9,10])),shape=(11,26))
    M = M.toarray()

    P,L,_ = lu(M[:,:2])
    M = solve(np.concatenate((P@L,P[:,2:]),axis=1),M[:,2:])
    M = M[-9:,:]

    T0 = np.zeros((15,15))
    T0[[4,6,7,8,12,13,9,14,10],:] = -M[:,9:]
    T0.flat[[4,21,37,57,88,179]] = 1
    T1 = np.zeros((15,15))
    T1[np.ix_([4,6,7,8,12,13,9,14,10],[4,6,7,8,12,13,9,14,10])] = M[:,:9]
    T1.flat[[0,16,32,48,80,176]] = 1

    _,V = eig(T0,T1)
    S = V[11:14,:]/np.tile(V[14,:],(3,1))
    S = S[:,np.all(np.isfinite(S),axis=0)]

    return S