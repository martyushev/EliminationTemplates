import numpy as np
from scipy.sparse import csr_matrix
from scipy.linalg import lu, solve, eig

# Input: coefficient matrix C of size 10x20
# Output: solution matrix S of size 3x10

def red_10x20_5p(C):
    M = csr_matrix((C.flat[[3,6,8,9,12,14,15,17,18,19,0,1,2,4,5,7,10,11,13,16,23,26,28,29,32,34,35,37,38,39,20,21,22,24,25,27,30,31,33,36,43,46,48,49,52,54,55,57,58,59,40,41,42,44,45,47,50,51,53,56,63,66,68,69,72,74,75,77,78,79,60,61,62,64,65,67,70,71,73,76,83,86,88,89,92,94,95,97,98,99,80,81,82,84,85,87,90,91,93,96,103,106,108,109,112,114,115,117,118,119,100,101,102,104,105,107,110,111,113,116,123,126,128,129,132,134,135,137,138,139,120,121,122,124,125,127,130,131,133,136,143,146,148,149,152,154,155,157,158,159,140,141,142,144,145,147,150,151,153,156,163,166,168,169,172,174,175,177,178,179,160,161,162,164,165,167,170,171,173,176,183,186,188,189,192,194,195,197,198,199,180,181,182,184,185,187,190,191,193,196]],([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])),shape=(10,20))
    M = M.toarray()

    P,L,_ = lu(M[:,:4])
    M = solve(np.concatenate((P@L,P[:,4:]),axis=1),M[:,4:])
    M = M[-6:,:]

    T0 = np.zeros((10,10))
    T0[[2,4,5,7,8,9],:] = -M[:,6:]
    T0.flat[[6,17,38,69]] = 1
    T1 = np.zeros((10,10))
    T1[np.ix_([2,4,5,7,8,9],[2,4,5,7,8,9])] = M[:,:6]
    T1.flat[[0,11,33,66]] = 1

    _,V = eig(T0,T1)
    S = V[6:9,:]/np.tile(V[9,:],(3,1))
    S = S[:,np.all(np.isfinite(S),axis=0)]

    return S