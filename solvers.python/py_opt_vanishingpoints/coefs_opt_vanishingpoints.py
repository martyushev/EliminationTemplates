import numpy as np

def coefs_opt_vanishingpoints(data):
    M1 = data[0].T.flat
    M2 = data[1].T.flat
    M3 = data[2].T.flat

    C = np.zeros((4,76))
    C.flat[[291,294,298,303]] = -1
    C.flat[299] = 1
    C.flat[[101,210]] = -12*M1[1]+12*M2[1]
    C.flat[[97,223]] = 4*M1[1]-4*M2[1]
    C.flat[189] = -12*M1[2]+12*M3[2]
    C.flat[[3,43,80,120,161,197]] = -16*M2[1]+16*M1[1]
    C.flat[23] = -12*M2[1]+12*M1[1]
    C.flat[27] = 4*M2[1]-4*M1[1]
    C.flat[[1,68,78,145,159,222]] = 16*M2[1]-16*M1[1]
    C.flat[[9,63,86,141,166,220]] = -16*M2[4]+16*M3[4]
    C.flat[[46,191]] = -12*M2[4]+12*M3[4]
    C.flat[[71,179]] = 4*M2[4]-4*M3[4]
    C.flat[[16,22,93,100,171,183]] = 16*M2[4]-16*M3[4]
    C.flat[[15,65,92,142,170,221]] = -16*M3[2]+16*M1[2]
    C.flat[[30,126]] = -12*M3[2]+12*M1[2]
    C.flat[173] = -4*M3[2]+4*M1[2]
    C.flat[[42,147]] = 4*M3[2]-4*M1[2]
    C.flat[[6,28,83,105,163,188]] = 16*M3[2]-16*M1[2]
    C.flat[110] = -12*M3[4]+12*M2[4]
    C.flat[118] = 4*M3[4]-4*M2[4]
    C.flat[207] = 8*M1[2]-16*M2[2]+8*M3[2]
    C.flat[[7,38,84,116,164,195]] = -32*M1[4]+16*M2[4]+16*M3[4]
    C.flat[[32,205]] = 16*M1[4]-8*M2[4]-8*M3[4]
    C.flat[[26,56,104,133,187,212]] = 32*M1[4]-16*M2[4]-16*M3[4]
    C.flat[[31,49,109,127,190,208]] = -16*M2[1]+32*M3[1]-16*M1[1]
    C.flat[[39,113,202]] = -4*M2[1]+8*M3[1]-4*M1[1]
    C.flat[[8,24,85,102,165,185]] = -32*M2[2]+16*M3[2]+16*M1[2]
    C.flat[[34,122,177]] = 8*M2[2]-4*M3[2]-4*M1[2]
    C.flat[[40,54,117,132,196,211]] = 32*M2[2]-16*M3[2]-16*M1[2]
    C.flat[[58,106,175]] = -4*M2[4]-4*M3[4]+8*M1[4]
    C.flat[[50,143,216]] = 4*M2[4]+4*M3[4]-8*M1[4]
    C.flat[[12,35,89,112,168,193]] = -32*M3[1]+16*M1[1]+16*M2[1]
    C.flat[53] = -16*M3[1]+8*M2[1]+8*M1[1]
    C.flat[[64,138,198]] = -8*M3[1]+4*M1[1]+4*M2[1]
    C.flat[[131,184]] = 16*M3[1]-8*M1[1]-8*M2[1]
    C.flat[[48,108]] = -8*M3[2]+16*M2[2]-8*M1[2]
    C.flat[[67,134,214]] = 4*M3[2]-8*M2[2]+4*M1[2]
    C.flat[124] = 8*M3[4]-16*M1[4]+8*M2[4]
    C.flat[[0,4,18,72,77,81,95,149,158,162,172,226]] = -4*M3[5]-4*M2[3]-4*M1[0]
    C.flat[[21,103,194]] = 4*M3[5]+4*M2[3]+4*M1[0]
    C.flat[[62,115,186]] = 8*M2[5]+8*M3[3]-4*M3[5]-4*M2[3]+4*M1[0]
    C.flat[[2,59,79,136,160,213]] = -8*M3[5]-16*M2[0]+8*M2[3]+8*M1[0]-16*M1[3]
    C.flat[[37,140,182]] = -4*M3[5]+4*M2[3]+8*M3[0]+8*M1[5]-4*M1[0]
    C.flat[[25,99,219]] = 4*M3[5]-4*M2[3]+8*M1[3]+8*M2[0]-4*M1[0]
    C.flat[[11,51,88,128,167,209]] = 8*M3[5]-16*M1[5]-8*M2[3]-16*M3[0]+8*M1[0]
    C.flat[[13,47,90,125,169,206]] = 8*M3[5]+8*M2[3]-16*M2[5]-16*M3[3]-8*M1[0]
    C.flat[[33,111,192]] = -32*M2[5]-32*M3[0]+32*M3[3]-32*M1[3]+32*M1[5]+32*M2[0]
    C.flat[[55,129,200]] = 8*M2[5]+8*M3[0]-8*M3[3]+8*M1[3]-8*M1[5]-8*M2[0]

    C = C/np.sqrt(np.sum(C*np.conj(C),axis=1,keepdims=True))

    def U(w,x,y,z):
        return np.array([x**5,x**4*y,x**3*y**2,x**2*y**3,x*y**4,y**5,x**4*z,x**3*z*y,x**2*z*y**2,x*y**3*z,y**4*z,x**3*z**2,x**2*y*z**2,x*y**2*z**2,y**3*z**2,x**2*z**3,x*y*z**3,y**2*z**3,x*z**4,y*z**4,z**5,w*x**3,x**4,w*x**2*y,x**3*y,w*x*y**2,x**2*y**2,w*y**3,x*y**3,y**4,w*x**2*z,x**3*z,w*x*y*z,x**2*z*y,w*y**2*z,x*z*y**2,y**3*z,w*x*z**2,x**2*z**2,w*y*z**2,x*y*z**2,y**2*z**2,w*z**3,x*z**3,y*z**3,z**4,w*x**2,x**3,w*x*y,x**2*y,w*y**2,x*y**2,y**3,w*x*z,x**2*z,w*y*z,x*y*z,y**2*z,w*z**2,x*z**2,y*z**2,z**3,w*x,x**2,w*y,x*y,y**2,w*z,x*z,y*z,z**2,w,x,y,z,1])

    return C,U